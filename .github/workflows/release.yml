name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

permissions:
  contents: write


jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    #- name: Run tests
    #  run: |
    #    pytest tests/ -v --cov=sshplex --cov-report=xml

    #- name: Upload coverage to Codecov
    #  uses: codecov/codecov-action@v3
    #  with:
    #    file: ./coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Generate Release Notes
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git tag -l --sort=-version:refname | grep -v "^${{ github.ref_name }}$" | head -n 1)
        echo "Previous tag: $PREVIOUS_TAG"
        echo "Current tag: ${{ github.ref_name }}"
        
        # Generate changelog from commits
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## What's Changed in ${{ github.ref_name }}" > changelog.md
          echo "" >> changelog.md
          
          # Get commits between tags (excluding the current tag commit itself)
          COMMITS=$(git log --pretty=format:"%s (%h)" $PREVIOUS_TAG..${{ github.ref_name }} | grep -v "^chore: Bump version")
          
          if [ -n "$COMMITS" ]; then
            while IFS= read -r commit; do
              # Categorize commits based on conventional commit prefixes
              if [[ $commit == feat:* ]]; then
                echo "### 🚀 New Features" >> changelog.md
                echo "- ${commit#feat: }" >> changelog.md
              elif [[ $commit == fix:* ]]; then
                echo "### 🐛 Bug Fixes" >> changelog.md
                echo "- ${commit#fix: }" >> changelog.md
              elif [[ $commit == docs:* ]]; then
                echo "### 📚 Documentation" >> changelog.md
                echo "- ${commit#docs: }" >> changelog.md
              elif [[ $commit == chore:* ]]; then
                echo "### 🧹 Maintenance" >> changelog.md
                echo "- ${commit#chore: }" >> changelog.md
              else
                echo "### 📝 Other Changes" >> changelog.md
                echo "- $commit" >> changelog.md
              fi
              echo "" >> changelog.md
            done <<< "$COMMITS"
          else
            echo "### 🔧 Internal" >> changelog.md
            echo "- Version bump and internal improvements" >> changelog.md
            echo "" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ github.ref_name }}" >> changelog.md
        else
          echo "## Initial Release" > changelog.md
          echo "" >> changelog.md
          echo "This is the initial release of SSHplex." >> changelog.md
        fi
        
        # Set output for next step
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

  publish:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Check if version exists on PyPI
      id: check_version
      run: |
        pip install requests
        python -c "
        import requests
        import sys
        try:
            response = requests.get('https://pypi.org/pypi/sshplex/json')
            if response.status_code == 200:
                data = response.json()
                version = '${{ github.ref_name }}'.replace('v', '')
                if version in data['releases']:
                    print(f'Version {version} already exists on PyPI')
                    sys.exit(1)
                else:
                    print(f'Version {version} does not exist on PyPI, proceeding with upload')
            else:
                print('Could not check PyPI, proceeding with upload')
        except Exception as e:
            print(f'Error checking PyPI: {e}, proceeding with upload')
        "

    - name: Publish to PyPI
      if: success()
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload dist/*
